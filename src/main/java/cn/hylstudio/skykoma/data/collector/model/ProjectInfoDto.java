package cn.hylstudio.skykoma.data.collector.model;

import cn.hylstudio.skykoma.data.collector.entity.neo4j.ProjectEntity;
import cn.hylstudio.skykoma.data.collector.entity.neo4j.ScanRecordEntity;
import cn.hylstudio.skykoma.data.collector.entity.neo4j.VCSEntity;
import cn.hylstudio.skykoma.data.collector.entity.neo4j.projection.ProjectEntityNodeProjection;
import lombok.Data;

import java.util.List;
import java.util.stream.Collectors;

@Data
public class ProjectInfoDto {
    private String key;
    private String name;
    private VCSEntityDto vcsEntityDto;
    private FileDto rootFolder;
    private List<ModuleDto> modules;

    public ProjectInfoDto() {
    }

    public ProjectInfoDto(ProjectEntity entity) {
// -------------- generated by skykoma begin --------------
        this.key = entity.getKey();
        this.name = entity.getName();
        VCSEntity vcsEntity = entity.getVcsEntity();
        if (vcsEntity != null) {
            this.vcsEntityDto = new VCSEntityDto(entity.getVcsEntity());
        }
// -------------- generated by skykoma end --------------

    }

    public ProjectInfoDto(ProjectEntity entity, ScanRecordEntity scanRecordEntity) {
        // -------------- generated by skykoma begin --------------
        this(entity);
        this.rootFolder = new FileDto(scanRecordEntity.getRootFolder());
        this.modules = scanRecordEntity.getModules().stream().map(ModuleDto::new).collect(Collectors.toList());
        // -------------- generated by skykoma end --------------

    }

    public ProjectInfoDto(ProjectEntityNodeProjection entityDto) {
        // -------------- generated by skykoma begin --------------
        this.key = entityDto.getKey();
        this.name = entityDto.getName();
        // -------------- generated by skykoma end --------------

    }
    public ProjectInfoDto(ProjectEntityNodeProjection projectEntityNodeProjection, ScanRecordEntity scanRecordEntity) {
        this(projectEntityNodeProjection);
        this.rootFolder = new FileDto(scanRecordEntity.getRootFolder());
        this.modules = scanRecordEntity.getModules().stream().map(ModuleDto::new).collect(Collectors.toList());
    }
}
